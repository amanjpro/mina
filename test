#!/bin/bash

# Copyright (c) <2013>, Amanj Sherwany <http://www.amanj.me>
# All rights reserved.
# A simple shell script, to automatically build the project and test it

function help() {
  line1="\nThis is a small shell script, to automatically build the project "
  line2="(plugin) and test the plugin (against the provided test file (case))"
  line3="\nCopyright (c) <2013>, Amanj Sherwany <http://www.amanj.me>\n"
  line4="All rights reserved."
  echo ${line1}${line2}${line3}${line4}
}
function usage() {
  echo "Usage: ./test [options] TEST_FILE"
  echo "[options] are optional, and they can be one of the following:"
  echo "-h to print this help message."
  echo "-c to recompile and repackage the plugin."
  echo "-r to run the test case, after compiling it.\n"
  echo "-a to compile all test cases, without running them.\n"
  echo "Do not write the .scala extension for the test program."
}

argNum="$#"
if [ ${argNum} -lt 1 ]; then
  usage
  exit 1
fi


compile=false
run=false
testAll=false
helpf=false

while getopts ":h:cr:a" OPTION;
do
  case $OPTION in
    h) 
      usage;
      helpf=true;
      ;;
    c) 
      compile=true;
      ;;
    r) 
      run=true;
      ;;
    a)
      testAll=true;
      ;;
    \?) 
      echo "invalid option: $OPTION" 1>&2; 
      usage;
      exit 1;;
  esac
done

if [ ${helpf} == true ]; then
  help
  exit 0
fi

file=${@: -1}

if [ ${testAll} == false ]; then
  if [[ ${file} == -* ]]; then
    usage
    exit 1
  fi
else
  file="*"
fi



# Build the project first
if [ ${compile} == true ]; then
  echo "==========================="
  echo "   Compiling the plugin"
  echo "==========================="
  sbt package
fi

echo "==========================="
echo "  Compiling the test case"
echo "==========================="

# The plugin jar file
mina=target/scala-2.10/mina_2.10-1.0.jar

# Test files are in src/test/scala/ directory
testFile="src/test/scala/"${file}".scala"

# First compile the test file witht the plugin
base="bin/test/"

testDest=${base}"plugin"
# Create a destination direcotry if there is not one
mkdir -p ${testDest}
scalac -d ${testDest} -cp ${mina} -Xplugin:${mina} ${testFile}

# Then compile it without the plugin
plainDest=${base}"plain"
# Create a destination direcotry if there is not one
mkdir -p ${plainDest}
scalac -d ${plainDest} -cp ${mina} ${testFile}

if [ ${testAll} == false -a ${run} == true ]; then
  echo "==========================="
  echo "   Running the test case"
  echo "==========================="
  # Run the file once wihtout applying HPE
  scala -cp ${plainDest}:${mina} ${file}
  
  # Run the same file this time with applying HPE
  scala -cp ${testDest}:${mina} ${file}
fi

exit 0

