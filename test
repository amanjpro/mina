#!/bin/sh

# Copyright (c) <2013>, Amanj Sherwany <http://www.amanj.me>
# All rights reserved.
# A simple shell script, to automatically build the project and test it

function help() {
  usage
  line1="\nThis is a small shell script, to automatically build the project "
  line2="(plugin) and test the plugin (against the provided test file (case))"
  line3="\nCopyright (c) <2013>, Amanj Sherwany <http://www.amanj.me>\n"
  line4="All rights reserved."
  echo ${line1}${line2}${line3}${line4}
}
function usage() {
  echo "Usage: sudo [options] ./test TEST_FILE"
  echo "[options] are optional, and they can be one of the following:"
  echo "-h | --help to print this help message."
  echo "-c | --compile to recompile and repackage the plugin."
  echo "-r | --run to run the test case, after compiling it.\n"
  echo "-a | --all to compile all test cases, without running them.\n"
  echo "Do not write the .scala extension for the test program."
}

argNum="$#"
if [ ${argNum} -lt 1 ]; then
  usage
  exit 1
fi


compile=false
run=false
testAll=false

while [[ $1 == -* ]]; do
    case "$1" in
      -h|--help) help; exit 0;;
      -c|--compile) compile=true; shift;;
      -r|--run) run=true;shift;;
      -a|--all) testAll=true;shift;;
      --) shift; break;;
      -*) echo "invalid option: $1" 1>&2; usage; exit 1;;
    esac
done

file=${1}

if [ ${testAll} == false ]; then
  if [[ ${file} == -* ]]; then
    usage
    exit 1
  fi
else
  file="*"
fi



# Build the project first
if [ ${compile} == true ]; then
  echo "==========================="
  echo "   Compiling the plugin"
  echo "==========================="
  sbt package
  wait
fi

echo "==========================="
echo "  Compiling the test case"
echo "==========================="

# The plugin jar file
mina=target/scala-2.10/mina_2.10-1.0.jar

# Test files are in src/test/scala/ directory
testFile="src/test/scala/"${file}".scala"

# First compile the test file witht the plugin
base="bin/test/"

testDest=${base}"plugin"
# Create a destination direcotry if there is not one
mkdir -p ${testDest}
scalac -d ${testDest} -cp ${mina} -Xplugin:${mina} ${testFile}
wait

# Then compile it without the plugin
plainDest=${base}"plain"
# Create a destination direcotry if there is not one
mkdir -p ${plainDest}
scalac -d ${plainDest} -cp ${mina} ${testFile}
wait

if [ ${testAll} == false -a ${run} == true ]; then
  echo "==========================="
  echo "   Running the test case"
  echo "==========================="
  # Run the file once wihtout applying HPE
  scala -cp ${plainDest}:${mina} ${file}
  wait

  # Run the same file this time with applying HPE
  scala -cp ${testDest}:${mina} ${file}
  wait
fi

exit 0

