/*
 * Copyright (c) <2013>, Amanj Sherwany <http://www.amanj.me>
 * All rights reserved.
 * */

package scala.ch.usi.inf.l3.mina.store


sealed trait Value {
  def value[T]: Option[T];
}

case object Bottom extends Value {
  //TODO or should I throw an exception?
  override def value[T]: Option[T] = None
}

case object Top extends Value {
  //TODO or should I throw an exception?
  override def value[T]: Option[T] = None
}

case class CTValue(v: Any) extends Value {
  override def value[T]: Option[T] = {
    val temp = v.asInstanceOf[T]
    Some(temp)
  }
}

case class AbsValue(v: Any) extends Value {
  override def value[T]: Option[T] = {
    val temp = v.asInstanceOf[T]
    Some(temp)
  }
}