package scala.ch.usi.inf.l3.mina.eval


import scala.tools.nsc
import nsc.transform.{Transform, TypingTransformers}
import nsc.symtab.Flags._
import nsc.ast.TreeDSL
import nsc.Global
import nsc.Phase
import nsc.plugins.Plugin
import nsc.plugins.PluginComponent

class HPE(val global: Global) extends Plugin{
  import global._

  val name = "silly"
  val description = "add print after all value defentio ns"
  val components = List[PluginComponent](HPEComponent)
  
  private object HPEComponent extends PluginComponent 
					with Transform
					with TypingTransformers
					with TreeDSL{
		
		
    val global: HPE.this.global.type = HPE.this.global
    val runsAfter = List[String]("parser")
		override val runsBefore = List[String]("namer")
		val phaseName = HPE.this.name
		
    def newTransformer(unit: CompilationUnit) = new HPETransformer(unit)
		
		class HPETransformer(unit: CompilationUnit) 
				extends TypingTransformer(unit){
			import CODE._
			
			// val scala = Ident(newTermName(scala))
			// val scala = This(newTypeName("scala"))
			// 			val predef = scala DOT newTermName("Predef")
			// 			
			// 			val printLineMethod = Select(predef, "println")
			// 			val predefClass = Predef.getClass.getName
			// 			val predefName = if (predefClass.last == '$')
			// 				 										predefClass.dropRight(1) else predefClass
			// 			// val predefSymbol = rootMirror.getClassByName(newTermName("Predef"))
			
			// val f = predefSymbol.members.filter(_ => _ equals("println"))
			// 			
			// 			println(f(0))
			// 			
			// val printLineCall = fn(predef, newTermName("println"),  
			// 							Literal(Constant("Hello")))
			// val methodSymbol = newMethodSymbol(newTermName("println"), 
			// 							printLineCall.pos)
			// 		printLineCall.setSymbol(methodSymbol)
			// 		println(printLineCall + "    " + printLineCall.symbol)					
			//val printLineCall = TypeApply(printLineMethod,predefSymbol.symbol,
			//														List(Literal(Constant("Hello"))))
		
			
			// 												// println(printLineMethod)
												// 									println(printLineCall)
												// 
			// val printLineCall = Apply(Select(Select(Ident(newTypeName("scala")), scala.Predef), 
			// 								newTermName("println")), List(Literal(Constant("Hello"))))
			// override def preTransform(tree: Tree): Tree = tree 					//super.preTransform(tree)
			
			// override def postTransform(tree: Tree): Tree = tree
				//super.postTransform(tree)
			
			override def transform(tree: Tree): Tree ={
				var newTree: Tree = tree match{
					// case ap @ Apply(_, _) => { println(ap.symbol + "   " + ap)
					// 					ap}
					case cd @ ClassDef(mods, className, tparams, impl) => //if(cd.symbol.isClass)=>
					val newBody = impl.body.flatMap(_ match{
							case vd @ValDef(mod, name, tpt, rhs) =>							
							// val owner = vd.symbol.owner
							// val pos = vd.pos.focus
							val scalaTypeName = newTermName("scala")
							// val scalaSymbol = definitions.ScalaPackage
							val scalaIdent = Ident(scalaTypeName)
							// scalaIdent.setSymbol(scalaSymbol)
							
							val predefTermName = newTermName("Predef")
							// val predefSymbol = definitions.PredefModuleClass
							val predefSelect = Select(scalaIdent, predefTermName)
							// predefSelect.setSymbol(predefSymbol)
							// predefSelect.tpe = predefSymbol.tpe
							val printlnSelect = Select(predefSelect, newTermName("println"))
							
							// println(definitions.PredefModuleClass.getClass + "   " + definitions.PredefModuleClass)

							// val printSym = definitions.PredefModuleClass.newMethodSymbol("println", pos)
							// printSym.setFlag(METHOD)
							// println(definitions.UnitClass.tpe)
							// println(printSym.getInfonfo)
							// printSym setInfo MethodType(printSym.newSyntheticValueParams(List(definitions.AnyClass.tpe)), definitions.UnitClass.tpe)
							
							// println(printSym.info)
							// println(printSym.name)
							// val scalaThis = This(scalaSymbol)
							// scalaThis.tpe=scalaSymbol.tpe
							// println(scalaThis.tpe)
							// val predefTree = scalaThis DOT predefSymbol
							// predefTree.tpe=predefSymbol.tpe
							// val printTree = predefTree DOT printSym
							// printTree.tpe = MethodType(printSym.newSyntheticValueParams(List(definitions.AnyClass.tpe)), definitions.UnitClass.tpe)
							// println(printTree.tpe)
							// printTree.setTpe()
							// val applyPrint = TypeApply(selectTarget, List(Literal(Constant("Hello"))))
							
							// val newTermSymbol()
							
							val applyPrint = Apply(printlnSelect, List(Literal(Constant("Hello"))))
							// println(applyPrint)
							// applyPrint.tpe = definitions.UnitClass.tpe
							// println(applyPrint.tpe + "  DAYYYY")
							// applyPrint.setSymbol.
							// 						 																			printApply.setSymbol(printSym)
							// 							 																			printApply.setPos(pos)
							// 							 																			
							// 																			
							// 																			 println(printApply + "   CAN BE?")
							// 																			 
																			 
							
							// 							val printlnSymbol = predefSymbol.newMethodSymbol(printlnSelect.name, pos)
							// 							printlnSelect.setSymbol(printlnSymbol)							
							// 							val selectTarget = This(scalaSymbol) DOT predefSymbol DOT printlnSymbol
							// 							val applyPrint = TypeApply(selectTarget, 
							// 																List(Literal(Constant("Hello"))))
							// 							println(printlnSelect + "  symbol   " + printlnSymbol)
							// 							println(applyPrint +  "   " + selectTarget)
							// 							println(vd)
							
														// applyPrint.setPos(pos)
							
							
							
							
							// val scalaType = newTermName("scala")
							// 							val thisType = (This(vd.owner))
							// val predefTypeName = newTypeName("Predef")
							// 							val printTypeName = Select(Ident(newTermName("scala")),
							// 														predefTypeName)
							// 							val printTypeSelect = Select(printTypeName,
							// 								 					newTermName("println"))
							// 													println(printTypeSelect)
							// 							 val printLineCall = Apply(printTypeSelect,
							// 							 											List(Literal(Constant("Hello"))))
							// val methodCall = printLineCall
							
							
							
							
							

							// methodCall.symbol.setOwner(vd.symbol.owner)
							// val printLineSymbol = owner.newTypeSymbol(predefTypeName,
							// 																						pos)
							// applyPrint.setSymbol(printLineSymbol)
							
							
							
							// println(applyPrint + "   " + applyPrint.symbol)
							// 							val printlnParser = Ident(newTermName("println"))
							// 							printlnParser.setSymbol(owner.newMethodSymbol(newTermName("println"), pos))
							// 
							// 							val printlnApply = TypeApply(printlnParser, List(Literal(Constant("Hello"))))
							// 							println(printlnApply.symbol + "   I HOPE THIS WORKS")
							// 							val bb = TypeApply(Select(Select(This(newTypeName("scala")), predefSymbol), newTermName("println")), List(Literal(Constant("Hello"))))
							
							
							// List(vd)
							List(applyPrint, vd)// :: Nil
							case x => List(x)// :: Nil
							})
					
					
				  // val applyMethod = TypeApply(
				  // 								Select(Ident(newTermName("scala")) DOT newTermName("Predef"),
				  // 				  			newTermName("println")), 
				  // 				  			List(Literal(Constant("Hello"))))
					// val applyMethod = TypeApply(Select(Ident(newTermName("scala")) DOT newTermName("Predef"),
					// 									newTermName("println")), List(Listeral(Constant("Hello"))))
					// println(tree)
					treeCopy.ClassDef(tree, mods, className, tparams, treeCopy.Template(
								impl, impl.parents, impl.self, newBody))
								
					// case vd @ ValDef(mods, name, tpt, rhs) if(vd.symbol.owner.isClass)=> 
					// 					val owner = vd.symbol.owner
					// 					
					// 					println(printLineCall.getClass)
					// 					println(vd.symbol.owner)
					// 					tree
					// printLineCall
					// mkMethodCall(Select(Select(This(newTypeName("scala", scala.Predef), 
					// 												newTermName("println")), ))))
					// val methodCall = Apply(Select(Select(This(newTypeName("scala",
					// 															scala.Predef), newTermName("println")),
					// 															List(Literal(Constant("Hello"))))))
					// val lensApply = TypeApply(
					// 					Select(Ident(newTermName("scala")) DOT newTermName("Predef"), 
					// 					newTermName("println")),
					// 					List(Literal(Constant("hello"))))
					// newTree = vd + methodCall
					//Do transformation here
					case _ => tree
				}
				super.transform(newTree)
			}
		
		}
		
    // class PrintStatementPhase(prev: Phase) extends StdPhase(prev) {
    //       override def name = PrintStatement.this.name
    //       def apply(unit: CompilationUnit) {
    //         for ( tree @ ValDef(_, _, _, _) <- unit.body) 
    //           {
    //             val owner = tree.symbol.owner
    // 						// val methodCall = Apply(Select(Select(This(newTypeName("scala", 
    // 						// 								scala.Predef), newTermName("println")), 
    // 						// 								List(Literal(Constant("hello"))))))
    // 				    val lensApply = TypeApply(
    // 				        Select(Ident(newTermName("scalaz")) DOT newTermName("Lens"), newTermName("apply")),
    // 				        TypeTree(caseClassType) :: TypeTree(caseClassType.computeMemberType(member.symbol)) :: Nil)
    // 						
    //           }
    //       }
    //     }
  }
}
